version: '3.8'

services:
  # --- Servicio del Backend (Django) ---
  backend:
    build: ./backend  # Le dice a Compose que construya la imagen usando el Dockerfile en la carpeta ./backend
    container_name: bebidas_backend
    command: python manage.py runserver 0.0.0.0:8000 # Comando para iniciar el servidor
    volumes:
      - ./backend:/app  # Monta el código local en el contenedor para desarrollo en vivo
    ports:
      - "8000:8000" # Mapea el puerto 8000 del contenedor al puerto 8000 de tu máquina
    env_file:
      - ./backend/.env # Carga las variables de entorno desde el .env del backend
    depends_on:
      - db # Le dice a Docker que inicie el servicio 'db' antes que el backend

  # --- Servicio del Frontend (React) ---
  frontend:
    build: ./frontend # Construye la imagen usando el Dockerfile en la carpeta ./frontend
    container_name: bebidas_frontend
    volumes:
      - ./frontend/src:/app/src # Monta solo la carpeta 'src' para desarrollo en vivo
    ports:
      - "5173:80" # Mapea el puerto 80 del contenedor (Nginx) al puerto 5173 de tu máquina
    depends_on:
      - backend # Inicia el frontend después de que el backend esté listo

  # --- Servicio de la Base de Datos (PostgreSQL) ---
  db:
    image: postgres:15-alpine # Usa una imagen oficial de PostgreSQL
    container_name: bebidas_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/ # Persiste los datos de la BD
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres # ¡Cambiar en producción!
      - POSTGRES_DB=bebidasdb
    ports:
      - "5432:5432" # Mapea el puerto de la BD para que puedas conectarte desde tu máquina si es necesario

volumes:
  postgres_data: # Define el volumen para persistir los datos de la BD